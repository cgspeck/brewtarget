name: Linux

on: [push]

jobs:
  build:
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v2

      - name: Manually Install AppImage Builder
        working-directory: ${{github.workspace}}
        shell: bash
        run: |
          sudo apt install -y python3-pip python3-setuptools patchelf desktop-file-utils libgdk-pixbuf2.0-dev fakeroot strace
          sudo wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage -O /usr/local/bin/appimagetool
          sudo chmod +x /usr/local/bin/appimagetool
          sudo pip3 install appimage-builder

      - name: Apply Patches
        shell: bash
        working-directory: ${{github.workspace}}
        run: ./build-scripts/linux/apply-patches.sh $GITHUB_WORKSPACE

      # QT Mirrorlist: https://download.qt.io/static/mirrorlist/
      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: 5.14.2
          extra: '-b http://ftp.jaist.ac.jp/pub/qtproject/'

      - name: Create Build Environment
        run: cmake -E make_directory ${{github.workspace}}/build

      - name: Configure CMake
        shell: bash
        working-directory: ${{github.workspace}}/build
        run: |
          cmake \
            -DDO_RELEASE_BUILD=ON \
            $GITHUB_WORKSPACE

      - name: Build
        working-directory: ${{github.workspace}}/build
        shell: bash
        run: |
          make package

      - name: Upload Brewtarget Installers
        if: ${{ success() }}
        uses: actions/upload-artifact@v2
        with:
          name: brewtarget-linux-installers
          path: build/brewtarget*

      # create an AppImage
      # https://appimage-builder.readthedocs.io/en/latest/hosted-services/github-actions.html
      - name: Install App
        working-directory: ${{github.workspace}}/build
        shell: bash
        run: |
          make install DESTDIR=AppDir


      - name: Hacks to make AppImage Builder Happy
        working-directory: ${{github.workspace}}
        shell: bash
        run: |
          mkdir -p build/AppDir/usr/share/icons/hicolor/256x256/apps
          cp build-scripts/linux/resources/brewtarget.png \
            build/AppDir/usr/share/icons/hicolor/256x256/apps


      # - name: Build AppImage
      #   uses: AppImageCrafters/build-appimage-action@master
      #   env:
      #     UPDATE_INFO: gh-releases-zsync|cgspeck|brewtarget|latest|*x86_64.AppImage.zsync
      #   with:
      #     recipe: build-scripts/linux/AppImageBuilder.yml

      - name: Call AppImage Builder
        working-directory: ${{github.workspace}}
        shell: bash
        env:
          UPDATE_INFO: gh-releases-zsync|cgspeck|brewtarget|latest|*x86_64.AppImage.zsync
        run: |
          appimage-builder \
            --recipe=build-scripts/linux/AppImageBuilder.yml \
            --skip-test

      - name: Upload Brewtarget AppImage
        uses: actions/upload-artifact@v2
        with:
          name: brewtarget-appImage
          path: Brewtarget-latest-x86_64.AppImage

      - name: Recover Debris Artifacts
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: build-results
          path: build
          retention-days: 2
